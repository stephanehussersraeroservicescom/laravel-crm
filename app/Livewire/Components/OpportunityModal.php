<?php

namespace App\Livewire\Components;

use App\Livewire\Forms\OpportunityForm;
use App\Livewire\Traits\HasAttachments;
use App\Models\Opportunity;
use App\Models\Project;
use App\Models\User;
use App\Models\CertificationStatus;
use App\Models\AircraftSeatConfig;
use Livewire\Component;
use Livewire\WithFileUploads;

class OpportunityModal extends Component
{
    use WithFileUploads, HasAttachments;

    public OpportunityForm $form;
    public bool $showModal = false;
    public ?Opportunity $editingOpportunity = null;
    public $modalTitle = 'Create Opportunity';

    protected $listeners = [
        'openCreateModal' => 'openCreateModal',
        'openEditModal' => 'openEditModal',
        'closeModal' => 'closeModal',
        'confirm-delete-attachment' => 'confirmDeleteAttachment',
    ];

    public function openCreateModal()
    {
        $this->form->reset();
        $this->resetAttachments();
        $this->editingOpportunity = null;
        $this->modalTitle = 'Create Opportunity';
        $this->showModal = true;
    }

    public function openEditModal($opportunityId)
    {
        $this->editingOpportunity = Opportunity::findOrFail($opportunityId);
        $this->form->setOpportunity($this->editingOpportunity);
        $this->loadExistingAttachments();
        $this->modalTitle = 'Edit Opportunity';
        $this->showModal = true;
    }

    public function closeModal()
    {
        $this->showModal = false;
        $this->form->reset();
        $this->resetAttachments();
        $this->editingOpportunity = null;
    }

    public function save()
    {
        try {
            if ($this->editingOpportunity) {
                $opportunity = $this->form->update($this->editingOpportunity);
                $message = 'Opportunity updated successfully!';
            } else {
                $opportunity = $this->form->store();
                $message = 'Opportunity created successfully!';
            }

            $this->saveAttachments($opportunity);
            
            session()->flash('message', $message);
            $this->closeModal();
            $this->dispatch('opportunity-saved');
            
        } catch (\Exception $e) {
            session()->flash('error', 'Error saving opportunity: ' . $e->getMessage());
        }
    }

    public function updatedFormProjectId()
    {
        $this->form->updateAutoGeneratedName();
    }

    public function updatedFormType()
    {
        $this->form->updateAutoGeneratedName();
    }

    public function updatedFormCabinClass()
    {
        $this->form->updateAutoGeneratedName();
    }

    public function updatedFormPricePerLinearYard()
    {
        $this->form->updatePotentialValue();
    }

    public function updatedFormLinearYardsPerSeat()
    {
        $this->form->updatePotentialValue();
    }

    public function updatedFormSeatsInOpportunity()
    {
        $this->form->updatePotentialValue();
    }

    public function getProjectsProperty()
    {
        return Project::with('airline')->orderBy('created_at', 'desc')->get();
    }

    public function getUsersProperty()
    {
        return User::orderBy('name')->get();
    }

    public function getCertificationStatusesProperty()
    {
        return CertificationStatus::orderBy('name')->get();
    }

    public function getAircraftSeatConfigsProperty()
    {
        return AircraftSeatConfig::orderBy('aircraft_type')->get();
    }

    private function loadExistingAttachments()
    {
        if ($this->editingOpportunity && $this->editingOpportunity->attachments) {
            $this->existingAttachments = $this->editingOpportunity->attachments->map(function ($attachment) {
                return [
                    'id' => $attachment->id,
                    'filename' => $attachment->filename,
                    'size' => $attachment->size,
                    'path' => $attachment->path,
                ];
            })->toArray();
        }
    }

    public function render()
    {
        return view('livewire.components.opportunity-modal');
    }
}