<?php

namespace App\Livewire;

use Livewire\Component;
use Livewire\WithPagination;
use Livewire\WithFileUploads;
use App\Models\Opportunity;
use App\Models\Project;
use App\Models\Status;
use App\Models\User;
use App\Models\Attachment;
use App\Enums\OpportunityType;
use App\Enums\CabinClass;
use App\Enums\OpportunityStatus;
use Livewire\Attributes\Validate;
use Illuminate\Support\Facades\Storage;

class OpportunityManagement extends Component
{
    use WithPagination, WithFileUploads;

    // Search and Filter Properties
    public $search = '';
    public $filterType = '';
    public $filterCabinClass = '';
    public $filterStatus = '';
    public $filterProject = '';
    public $filterAirline = '';
    public $filterAircraftType = '';
    public $filterAssignedTo = '';
    public $sortBy = 'created_at';
    public $sortDirection = 'desc';
    public $perPage = 10;
    public $showDeleted = false;

    // Modal Properties
    public $showModal = false;
    public $modalMode = 'create'; // 'create' or 'edit'
    public $selectedOpportunity = null;
    
    // Track if name has been manually edited
    public $nameManuallyEdited = false;
    public $autoGeneratedName = '';
    
    // Modal airline filter for projects
    public $modalAirlineFilter = '';
    public $filteredProjects;
    
    // File upload properties
    public $attachments = [];
    public $existingAttachments = [];
    public $attachmentToDelete = null;

    // Form Properties
    #[Validate('required|exists:projects,id')]
    public $project_id = '';
    
    #[Validate('required|string')]
    public $type = 'vertical';
    
    #[Validate('required|string')]
    public $cabin_class = 'economy';
    
    #[Validate('required|string')]
    public $status = 'active';
    
    #[Validate('required|integer|min:0|max:100')]
    public $probability = 50;
    
    #[Validate('nullable|numeric|min:0')]
    public $potential_value = 0;
    
    #[Validate('nullable|string|max:255')]
    public $name = '';
    
    #[Validate('nullable|string|max:1000')]
    public $description = '';
    
    #[Validate('nullable|string|max:1000')]
    public $comments = '';
    
    #[Validate('required|exists:statuses,id')]
    public $certification_status_id = 11;
    
    #[Validate('required|exists:users,id')]
    public $assigned_to = '';
    
    #[Validate('nullable|exists:users,id')]
    public $created_by = '';
    
    // Seat configuration fields
    #[Validate('nullable|numeric|min:100|max:300')]
    public $price_per_linear_yard = '';
    
    #[Validate('nullable|numeric|min:0.5|max:5.0')]
    public $linear_yards_per_seat = '';
    
    #[Validate('nullable|integer|min:1')]
    public $seats_in_opportunity = '';
    
    #[Validate('nullable|exists:aircraft_seat_configurations,id')]
    public $aircraft_seat_config_id = '';

    public function mount()
    {
        $this->created_by = auth()->id();
        $this->assigned_to = auth()->id();
        $this->filteredProjects = collect();
        
        // Check for team creation context (redirected from team management)
        if (session()->has('team_creation_context')) {
            $context = session()->get('team_creation_context');
            session()->forget('team_creation_context');
            
            // Pre-fill form with context data and open modal
            if (isset($context['airline_id'])) {
                $this->filterAirline = $context['airline_id'];
            }
            
            if (isset($context['project_id'])) {
                $this->project_id = $context['project_id'];
            }
            
            if (isset($context['opportunity_type'])) {
                $this->type = $context['opportunity_type'];
            }
            
            if (isset($context['cabin_class'])) {
                $this->cabin_class = $context['cabin_class'];
            }
            
            // Auto-generate name will be handled by generateOpportunityName()
            $this->nameManuallyEdited = false;
            
            // Generate the opportunity name based on selections
            $this->generateOpportunityName();
            
            $this->description = 'Created from team management for staffing purposes';
            $this->assigned_to = auth()->id();
            
            // Open the modal automatically
            $this->modalMode = 'create';
            $this->showModal = true;
            
            session()->flash('message', 'Opportunity creation form pre-filled from team management context.');
        } else {
            // Set default filter to current user if they have any opportunities
            $currentUserId = auth()->id();
            $userHasOpportunities = Opportunity::where('assigned_to', $currentUserId)->exists();
            
            if ($userHasOpportunities) {
                $this->filterAssignedTo = $currentUserId;
            }
        }
    }

    public function render()
    {
        $opportunities = $this->getOpportunities();
        // Get unique projects
        $projects = Project::with('airline')
            ->select('projects.*')
            ->distinct()
            ->orderBy('name')
            ->get();
        $airlines = \App\Models\Airline::orderBy('name')->get();
        $aircraftTypes = \App\Models\AircraftType::orderBy('name')->get();
        $statuses = Status::where('type', 'certification')->get();
        $users = User::orderBy('name')->get();
        
        // Update filtered projects based on modal airline filter
        $this->updateFilteredProjects();

        return view('livewire.opportunity-management', [
            'opportunities' => $opportunities,
            'projects' => $projects,
            'airlines' => $airlines,
            'aircraftTypes' => $aircraftTypes,
            'statuses' => $statuses,
            'users' => $users,
            'opportunityTypes' => OpportunityType::cases(),
            'cabinClasses' => CabinClass::cases(),
            'opportunityStatuses' => OpportunityStatus::cases(),
            'filteredProjects' => $this->filteredProjects,
        ])->layout('layouts.app');
    }

    public function getOpportunities()
    {
        $query = Opportunity::with(['project.airline', 'project.aircraftType', 'certificationStatus', 'assignedTo', 'createdBy', 'deletedBy', 'attachments']);
        
        // Include soft deleted records if checkbox is checked
        if ($this->showDeleted) {
            $query->withTrashed();
        }

        // Search
        if ($this->search) {
            $query->where(function ($q) {
                $q->where('name', 'like', '%' . $this->search . '%')
                  ->orWhere('description', 'like', '%' . $this->search . '%')
                  ->orWhere('comments', 'like', '%' . $this->search . '%')
                  ->orWhereHas('project', function ($pq) {
                      $pq->where('name', 'like', '%' . $this->search . '%');
                  })
                  ->orWhereHas('project.airline', function ($aq) {
                      $aq->where('name', 'like', '%' . $this->search . '%');
                  });
            });
        }

        // Filters
        if ($this->filterType) {
            $query->where('type', $this->filterType);
        }

        if ($this->filterCabinClass) {
            $query->where('cabin_class', $this->filterCabinClass);
        }

        if ($this->filterStatus) {
            $query->where('status', $this->filterStatus);
        }

        if ($this->filterProject) {
            $query->where('project_id', $this->filterProject);
        }

        if ($this->filterAirline) {
            $query->whereHas('project', function ($q) {
                $q->where('airline_id', $this->filterAirline);
            });
        }

        if ($this->filterAircraftType) {
            $query->whereHas('project', function ($q) {
                $q->where('aircraft_type_id', $this->filterAircraftType);
            });
        }

        if ($this->filterAssignedTo) {
            $query->where('assigned_to', $this->filterAssignedTo);
        }

        // Sorting
        $query->orderBy($this->sortBy, $this->sortDirection);

        return $query->paginate($this->perPage);
    }

    public function sortBy($field)
    {
        if ($this->sortBy === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortBy = $field;
            $this->sortDirection = 'asc';
        }
        $this->resetPage();
    }

    public function clearFilters()
    {
        $this->search = '';
        $this->filterType = '';
        $this->filterCabinClass = '';
        $this->filterStatus = '';
        $this->filterProject = '';
        $this->filterAirline = '';
        $this->filterAircraftType = '';
        $this->filterAssignedTo = '';
        $this->showDeleted = false;
        $this->resetPage();
    }

    public function updatedShowDeleted()
    {
        $this->resetPage();
    }

    public function openCreateModal()
    {
        $this->resetForm();
        $this->modalMode = 'create';
        $this->showModal = true;
        $this->updateFilteredProjects();
    }

    public function openEditModal($opportunityId)
    {
        $this->selectedOpportunity = Opportunity::findOrFail($opportunityId);
        $this->fillForm($this->selectedOpportunity);
        $this->modalMode = 'edit';
        $this->showModal = true;
        $this->updateFilteredProjects();
    }

    public function closeModal()
    {
        $this->showModal = false;
        $this->resetForm();
        $this->selectedOpportunity = null;
    }

    public function save()
    {
        $this->validate();
        
        // Check if assigned_to field is empty
        if (empty($this->assigned_to)) {
            $this->addError('assigned_to', 'The assigned to field is required.');
            return;
        }
        
        // Additional enum validation
        $typeValues = array_column(OpportunityType::cases(), 'value');
        $statusValues = array_column(OpportunityStatus::cases(), 'value');
        $cabinValues = array_column(CabinClass::cases(), 'value');
        
        if (!in_array($this->type, $typeValues)) {
            $this->addError('type', 'Invalid opportunity type.');
            return;
        }
        
        if (!in_array($this->status, $statusValues)) {
            $this->addError('status', 'Invalid opportunity status.');
            return;
        }
        
        if ($this->cabin_class && !in_array($this->cabin_class, $cabinValues)) {
            $this->addError('cabin_class', 'Invalid cabin class.');
            return;
        }

        try {
            if ($this->modalMode === 'create') {
                $this->created_by = auth()->id();
                $data = $this->getFormData();
                $data['updated_by'] = auth()->id();
                $opportunity = Opportunity::create($data);
                
                // Save attachments
                $this->saveAttachments($opportunity);
                
                session()->flash('message', 'Opportunity created successfully.');
            } else {
                $data = $this->getFormData();
                $data['updated_by'] = auth()->id();
                $this->selectedOpportunity->update($data);
                
                // Save new attachments
                $this->saveAttachments($this->selectedOpportunity);
                
                session()->flash('message', 'Opportunity updated successfully.');
            }
            
            $this->closeModal();
        } catch (\Exception $e) {
            session()->flash('error', 'Error saving opportunity: ' . $e->getMessage());
        }
    }

    public function delete($opportunityId)
    {
        try {
            $opportunity = Opportunity::findOrFail($opportunityId);
            $opportunity->update(['deleted_by' => auth()->id()]);
            $opportunity->delete();
            session()->flash('message', 'Opportunity deleted successfully.');
        } catch (\Exception $e) {
            session()->flash('error', 'Error deleting opportunity: ' . $e->getMessage());
        }
    }

    public function restore($opportunityId)
    {
        try {
            $opportunity = Opportunity::withTrashed()->findOrFail($opportunityId);
            $opportunity->update(['deleted_by' => null]);
            $opportunity->restore();
            session()->flash('message', 'Opportunity restored successfully.');
        } catch (\Exception $e) {
            session()->flash('error', 'Error restoring opportunity: ' . $e->getMessage());
        }
    }

    private function resetForm()
    {
        $this->project_id = '';
        $this->type = 'vertical';
        $this->cabin_class = 'economy';
        $this->status = 'active';
        $this->probability = 50;
        $this->potential_value = 0;
        $this->name = '';
        $this->description = '';
        $this->comments = '';
        $this->certification_status_id = 11;
        $this->assigned_to = auth()->id();
        $this->created_by = auth()->id();
        $this->nameManuallyEdited = false;
        $this->autoGeneratedName = '';
        $this->modalAirlineFilter = '';
        $this->filteredProjects = collect();
        $this->attachments = [];
        $this->existingAttachments = [];
        $this->attachmentToDelete = null;
        
        // Reset seat configuration fields
        $this->price_per_linear_yard = '';
        $this->linear_yards_per_seat = '';
        $this->seats_in_opportunity = '';
        $this->aircraft_seat_config_id = '';
    }

    private function fillForm($opportunity)
    {
        $this->project_id = $opportunity->project_id;
        $this->type = $opportunity->type?->value ?? $opportunity->type;
        $this->cabin_class = $opportunity->cabin_class?->value ?? $opportunity->cabin_class;
        $this->status = $opportunity->status?->value ?? $opportunity->status;
        $this->probability = $opportunity->probability;
        $this->potential_value = $opportunity->potential_value;
        $this->name = $opportunity->name;
        $this->description = $opportunity->description;
        $this->comments = $opportunity->comments;
        $this->certification_status_id = $opportunity->certification_status_id;
        $this->assigned_to = $opportunity->assigned_to;
        $this->created_by = $opportunity->created_by;
        
        // Set the auto-generated name for comparison
        $this->nameManuallyEdited = false;
        $this->autoGeneratedName = $this->name;
        
        // Load existing attachments
        $this->existingAttachments = $opportunity->attachments;
        $this->attachments = [];
        
        // Fill seat configuration fields
        $this->price_per_linear_yard = $opportunity->price_per_linear_yard;
        $this->linear_yards_per_seat = $opportunity->linear_yards_per_seat;
        $this->seats_in_opportunity = $opportunity->seats_in_opportunity;
        $this->aircraft_seat_config_id = $opportunity->aircraft_seat_config_id;
    }

    private function getFormData()
    {
        return [
            'project_id' => $this->project_id,
            'type' => $this->type,
            'cabin_class' => $this->cabin_class,
            'status' => $this->status,
            'probability' => $this->probability,
            'potential_value' => $this->calculatePotentialValue(),
            'name' => $this->name,
            'description' => $this->description,
            'comments' => $this->comments,
            'certification_status_id' => $this->certification_status_id,
            'assigned_to' => $this->assigned_to,
            'created_by' => $this->created_by,
            'price_per_linear_yard' => $this->price_per_linear_yard ?: null,
            'linear_yards_per_seat' => $this->linear_yards_per_seat ?: null,
            'seats_in_opportunity' => $this->seats_in_opportunity ?: null,
            'aircraft_seat_config_id' => $this->aircraft_seat_config_id ?: null,
        ];
    }

    public function updatedSearch()
    {
        $this->resetPage();
    }

    public function updatedFilterType()
    {
        $this->resetPage();
    }

    public function updatedFilterCabinClass()
    {
        $this->resetPage();
    }

    public function updatedFilterStatus()
    {
        $this->resetPage();
    }

    public function updatedFilterProject()
    {
        $this->resetPage();
    }

    public function updatedFilterAirline()
    {
        $this->resetPage();
    }

    public function updatedFilterAircraftType()
    {
        $this->resetPage();
    }

    public function updatedFilterAssignedTo()
    {
        $this->resetPage();
    }

    public function updatedPerPage()
    {
        $this->resetPage();
    }
    
    public function updatedModalAirlineFilter()
    {
        // Only process airline filter changes in create mode
        if ($this->modalMode === 'create') {
            // Reset project selection when airline filter changes
            $this->project_id = '';
            $this->updateFilteredProjects();
            $this->generateOpportunityName();
        }
    }
    
    public function updatedProjectId()
    {
        $this->generateOpportunityName();
        $this->lookupSeatConfiguration();
    }
    
    public function updatedType()
    {
        $this->generateOpportunityName();
    }
    
    public function updatedCabinClass()
    {
        $this->generateOpportunityName();
        $this->lookupSeatConfiguration();
    }
    
    public function updatedName()
    {
        // Check if user has manually edited the name
        if ($this->name !== $this->autoGeneratedName) {
            $this->nameManuallyEdited = true;
        }
    }
    
    private function generateOpportunityName()
    {
        // Only auto-generate if name hasn't been manually edited or if in edit mode
        if ($this->nameManuallyEdited && $this->modalMode === 'create') {
            return;
        }
        
        $nameParts = [];
        
        // Get project details for airline and aircraft type
        if ($this->project_id) {
            $project = Project::with(['airline', 'aircraftType'])->find($this->project_id);
            if ($project) {
                // Add airline name
                if ($project->airline) {
                    $nameParts[] = $project->airline->name;
                }
                
                // Add aircraft type
                if ($project->aircraftType) {
                    $nameParts[] = $project->aircraftType->name;
                }
            }
        }
        
        // Add opportunity type
        if ($this->type) {
            $nameParts[] = ucfirst($this->type);
        }
        
        // Add cabin class
        if ($this->cabin_class) {
            $cabinClass = str_replace('_', ' ', ucwords($this->cabin_class, '_'));
            $nameParts[] = $cabinClass;
        }
        
        // Generate the base name
        $baseName = implode(' ', $nameParts);
        
        if ($baseName) {
            // In edit mode, preserve any custom suffix the user had added
            if ($this->modalMode === 'edit' && $this->name) {
                // Check if the current name starts with the old auto-generated pattern
                $currentBaseParts = [];
                
                if ($this->selectedOpportunity) {
                    if ($this->selectedOpportunity->project && $this->selectedOpportunity->project->airline) {
                        $currentBaseParts[] = $this->selectedOpportunity->project->airline->name;
                    }
                    if ($this->selectedOpportunity->project && $this->selectedOpportunity->project->aircraftType) {
                        $currentBaseParts[] = $this->selectedOpportunity->project->aircraftType->name;
                    }
                    if ($this->selectedOpportunity->type) {
                        $currentBaseParts[] = ucfirst($this->selectedOpportunity->type?->value ?? $this->selectedOpportunity->type);
                    }
                    if ($this->selectedOpportunity->cabin_class) {
                        $cabinClass = str_replace('_', ' ', ucwords($this->selectedOpportunity->cabin_class?->value ?? $this->selectedOpportunity->cabin_class, '_'));
                        $currentBaseParts[] = $cabinClass;
                    }
                }
                
                $oldBase = implode(' ', $currentBaseParts);
                
                // If the name starts with the old base, preserve the suffix
                if ($oldBase && str_starts_with($this->name, $oldBase)) {
                    $suffix = trim(substr($this->name, strlen($oldBase)));
                    $this->name = $baseName . ($suffix ? ' ' . $suffix : '');
                } else {
                    // Name was completely custom, update to new base
                    $this->name = $baseName;
                }
            } else {
                // For new opportunities, just use the base name
                $this->name = $baseName;
            }
            
            $this->autoGeneratedName = $this->name;
        }
    }
    
    private function updateFilteredProjects()
    {
        $query = Project::with('airline')
            ->select('projects.*')
            ->distinct()
            ->orderBy('name');
            
        if ($this->modalAirlineFilter) {
            $query->where('airline_id', $this->modalAirlineFilter);
        }
        
        $this->filteredProjects = $query->get();
    }
    
    public function removeAttachment($index)
    {
        unset($this->attachments[$index]);
        $this->attachments = array_values($this->attachments);
    }
    
    public function deleteExistingAttachment($attachmentId)
    {
        $this->attachmentToDelete = $attachmentId;
    }
    
    public function confirmDeleteAttachment()
    {
        if ($this->attachmentToDelete) {
            $attachment = Attachment::find($this->attachmentToDelete);
            if ($attachment) {
                Storage::delete($attachment->file_path);
                $attachment->delete();
                
                // Refresh existing attachments
                if ($this->selectedOpportunity) {
                    $this->existingAttachments = $this->selectedOpportunity->fresh()->attachments;
                }
            }
            $this->attachmentToDelete = null;
        }
    }
    
    public function cancelDeleteAttachment()
    {
        $this->attachmentToDelete = null;
    }
    
    private function saveAttachments($opportunity)
    {
        foreach ($this->attachments as $file) {
            if ($file) {
                $path = $file->store('opportunities', 'public');
                
                Attachment::create([
                    'attachable_type' => Opportunity::class,
                    'attachable_id' => $opportunity->id,
                    'name' => $file->getClientOriginalName(),
                    'file_path' => $path,
                    'mime_type' => $file->getMimeType(),
                    'file_size' => $file->getSize(),
                    'uploaded_by' => auth()->id(),
                ]);
            }
        }
    }
    
    // Seat configuration calculation methods
    public function calculatePotentialValue(): float
    {
        if (!$this->price_per_linear_yard || !$this->linear_yards_per_seat || !$this->seats_in_opportunity || !$this->project_id) {
            return $this->potential_value ?: 0;
        }
        
        $project = \App\Models\Project::find($this->project_id);
        if (!$project || !$project->number_of_aircraft) {
            return $this->potential_value ?: 0;
        }
        
        $perAircraftValue = $this->seats_in_opportunity * $this->price_per_linear_yard * $this->linear_yards_per_seat;
        return $perAircraftValue * $project->number_of_aircraft;
    }
    
    public function calculatePerAircraftValue(): float
    {
        if (!$this->price_per_linear_yard || !$this->linear_yards_per_seat || !$this->seats_in_opportunity) {
            return 0;
        }
        
        return $this->seats_in_opportunity * $this->price_per_linear_yard * $this->linear_yards_per_seat;
    }
    
    public function updatedPricePerLinearYard()
    {
        $this->potential_value = $this->calculatePotentialValue();
    }
    
    public function updatedLinearYardsPerSeat()
    {
        $this->potential_value = $this->calculatePotentialValue();
    }
    
    public function updatedSeatsInOpportunity()
    {
        $this->potential_value = $this->calculatePotentialValue();
    }
    
    private function lookupSeatConfiguration()
    {
        // Only lookup if we have project and cabin class
        if (!$this->project_id || !$this->cabin_class) {
            return;
        }
        
        // Get project with airline and aircraft type
        $project = \App\Models\Project::with(['airline', 'aircraftType'])->find($this->project_id);
        if (!$project || !$project->airline || !$project->aircraftType) {
            return;
        }
        
        // Try to find airline-specific configuration first
        $seatConfig = \App\Models\AircraftSeatConfiguration::where('airline_id', $project->airline_id)
            ->where('aircraft_type_id', $project->aircraft_type_id)
            ->first();
            
        // If not found, try default airline configuration
        if (!$seatConfig) {
            $defaultAirline = \App\Models\Airline::where('name', 'Default')->first();
            if ($defaultAirline) {
                $seatConfig = \App\Models\AircraftSeatConfiguration::where('airline_id', $defaultAirline->id)
                    ->where('aircraft_type_id', $project->aircraft_type_id)
                    ->first();
            }
        }
        
        // If we found a configuration, populate the seats based on cabin class
        if ($seatConfig) {
            // Get the seat count for the specific cabin class
            $seatCount = match($this->cabin_class) {
                'first_class' => $seatConfig->first_class_seats,
                'business_class' => $seatConfig->business_class_seats,
                'premium_economy' => $seatConfig->premium_economy_seats,
                'economy' => $seatConfig->economy_seats,
                default => 0
            };
            
            $this->seats_in_opportunity = $seatCount;
            // Also populate the aircraft seat config reference
            $this->aircraft_seat_config_id = $seatConfig->id;
            
            // Recalculate potential value
            $this->potential_value = $this->calculatePotentialValue();
        }
    }
}