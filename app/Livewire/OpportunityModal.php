<?php

namespace App\Livewire;

use App\Livewire\Base\FormModal;
use App\Livewire\Forms\OpportunityForm;
use App\Livewire\Traits\HasAttachments;
use App\Models\Opportunity;
use App\Models\Project;
use App\Models\Airline;
use App\Models\User;
use App\Models\CertificationStatus;
use App\Models\AircraftSeatConfig;
use Livewire\WithFileUploads;

class OpportunityModal extends FormModal
{
    use WithFileUploads, HasAttachments;

    public OpportunityForm $form;
    
    // Filter properties for dynamic data
    public $modalAirlineFilter = '';
    public $filteredProjects;

    public function mount()
    {
        $this->form->created_by = auth()->id();
        $this->updateFilteredProjects();
    }

    protected function getModelClass()
    {
        return Opportunity::class;
    }

    protected function getValidationRules()
    {
        return $this->form->rules();
    }

    protected function resetForm()
    {
        $this->form->reset();
        $this->form->created_by = auth()->id();
        $this->resetAttachments();
        $this->modalAirlineFilter = '';
        $this->updateFilteredProjects();
    }

    protected function populateForm($opportunity)
    {
        $this->form->setOpportunity($opportunity);
        
        // Load existing attachments
        $this->existingAttachments = $opportunity->attachments()
            ->select('id', 'filename', 'path', 'size', 'mime_type')
            ->get()
            ->toArray();
    }

    protected function store()
    {
        $opportunity = $this->form->store();
        $this->saveAttachments($opportunity);
        
        return $opportunity;
    }

    protected function update()
    {
        $opportunity = $this->form->update($this->selectedRecord);
        $this->saveAttachments($opportunity);
        
        return $opportunity;
    }

    // Form event handlers
    public function updatedModalAirlineFilter()
    {
        $this->updateFilteredProjects();
    }

    public function updatedFormProjectId()
    {
        $this->form->updateAutoGeneratedName();
        $this->lookupSeatConfiguration();
    }

    public function updatedFormType()
    {
        $this->form->updateAutoGeneratedName();
    }

    public function updatedFormCabinClass()
    {
        $this->form->updateAutoGeneratedName();
    }

    public function updatedFormName()
    {
        $this->form->nameManuallyEdited = true;
    }

    public function updatedFormPricePerLinearYard()
    {
        $this->form->updatePotentialValue();
    }

    public function updatedFormLinearYardsPerSeat()
    {
        $this->form->updatePotentialValue();
    }

    public function updatedFormSeatsInOpportunity()
    {
        $this->form->updatePotentialValue();
    }

    private function updateFilteredProjects()
    {
        $query = Project::with('airline')->orderBy('name');
        
        if ($this->modalAirlineFilter) {
            $query->where('airline_id', $this->modalAirlineFilter);
        }
        
        $this->filteredProjects = $query->get();
    }

    private function lookupSeatConfiguration()
    {
        if (!$this->form->project_id) {
            return;
        }

        $project = Project::find($this->form->project_id);
        if (!$project) {
            return;
        }

        $seatConfig = AircraftSeatConfig::where('aircraft_type', $project->aircraft_type)
            ->where('cabin_class', $this->form->cabin_class)
            ->first();

        if ($seatConfig) {
            $this->form->aircraft_seat_config_id = $seatConfig->id;
            if (!$this->form->seats_in_opportunity) {
                $this->form->seats_in_opportunity = $seatConfig->total_seats;
            }
        }
    }

    // Helper properties for view
    public function getAirlinesProperty()
    {
        return Airline::orderBy('name')->get();
    }

    public function getUsersProperty()
    {
        return User::orderBy('name')->get();
    }

    public function getCertificationStatusesProperty()
    {
        return CertificationStatus::orderBy('name')->get();
    }

    protected function getCreateSuccessMessage(): string
    {
        return 'Opportunity created successfully.';
    }

    protected function getUpdateSuccessMessage(): string
    {
        return 'Opportunity updated successfully.';
    }

    public function render()
    {
        return view('livewire.opportunity-modal', [
            'airlines' => $this->airlines,
            'users' => $this->users,
            'certificationStatuses' => $this->certificationStatuses,
        ]);
    }
}