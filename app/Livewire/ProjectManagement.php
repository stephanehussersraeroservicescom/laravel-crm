<?php

namespace App\Livewire;

use Livewire\Component;
use Livewire\WithPagination;
use Livewire\WithFileUploads;
use App\Models\Project;
use App\Models\Airline;
use App\Models\AircraftType;
use App\Models\Status;
use App\Models\User;
use App\Models\Attachment;
use App\Models\Opportunity;
use Livewire\Attributes\Validate;
use Illuminate\Support\Facades\Storage;
use App\Services\CachedDataService;

class ProjectManagement extends Component
{
    use WithPagination, WithFileUploads;

    // Search and Filter Properties
    public $search = '';
    public $filterAirline = '';
    public $filterAircraftType = '';
    public $filterDesignStatus = '';
    public $filterCommercialStatus = '';
    public $showDeleted = false;
    public $sortBy = 'created_at';
    public $sortDirection = 'desc';
    public $perPage = 10;

    // Modal Properties
    public $showModal = false;
    public $modalMode = 'create'; // 'create' or 'edit'
    public $selectedProject = null;
    
    // Track if name has been manually edited
    public $nameManuallyEdited = false;
    public $autoGeneratedName = '';
    
    // File upload properties
    public $attachments = [];
    public $existingAttachments = [];
    public $attachmentToDelete = null;

    // Form Properties
    #[Validate('required|string|max:255')]
    public $name = '';
    
    #[Validate('required|exists:airlines,id')]
    public $airline_id = '';
    
    #[Validate('nullable|exists:aircraft_types,id')]
    public $aircraft_type_id = '';
    
    #[Validate('nullable|integer|min:1')]
    public $number_of_aircraft = '';
    
    #[Validate('nullable|exists:statuses,id')]
    public $design_status_id = '';
    
    #[Validate('nullable|exists:statuses,id')]
    public $commercial_status_id = '';
    
    #[Validate('required|exists:users,id')]
    public $owner_id = '';
    
    #[Validate('nullable|string|max:1000')]
    public $comment = '';
    
    // Forecasting fields
    #[Validate('nullable|in:linefit,retrofit')]
    public $linefit_retrofit = '';
    
    #[Validate('nullable|integer|min:1|max:10')]
    public $project_lifecycle_duration = 3;
    
    #[Validate('nullable|integer|min:2020|max:2040')]
    public $expected_start_year = '';
    
    // Dynamic distribution fields
    public $aircraft_distribution = [];
    public $distribution_years = [];
    public $show_distribution = false;

    public function mount()
    {
        // Check for team creation context (redirected from team management)
        if (session()->has('team_creation_context')) {
            $context = session()->get('team_creation_context');
            session()->forget('team_creation_context');
            
            // Pre-fill form with context data and open modal
            if (isset($context['airline_id'])) {
                $this->airline_id = $context['airline_id'];
                $this->filterAirline = $context['airline_id'];
            }
            
            // Auto-generate project name will be handled by generateProjectName()
            $this->nameManuallyEdited = false;
            
            $this->owner_id = auth()->user()->id;
            $this->comment = 'Created from team management for ' . (isset($context['opportunity_type']) ? $context['opportunity_type'] : 'opportunity') . ' staffing';
            
            // Generate the project name based on airline
            $this->generateProjectName();
            
            // Open the modal automatically
            $this->modalMode = 'create';
            $this->showModal = true;
            
            session()->flash('message', 'Project creation form pre-filled from team management context.');
        }
    }

    public function render()
    {
        $projects = $this->getProjects();
        // Use cached data for dropdowns
        $airlines = CachedDataService::getAirlines();
        $aircraftTypes = CachedDataService::getAircraftTypes();
        $statuses = CachedDataService::getStatuses();
        $users = CachedDataService::getSalesAndManagerUsers();

        return view('livewire.project-management', [
            'projects' => $projects,
            'airlines' => $airlines,
            'aircraftTypes' => $aircraftTypes,
            'statuses' => $statuses,
            'users' => $users,
        ]);
    }

    public function getProjects()
    {
        $query = Project::with(['airline', 'aircraftType', 'designStatus', 'commercialStatus', 'owner', 'attachments', 'opportunities']);
        
        // Include deleted if checkbox is checked
        if ($this->showDeleted) {
            $query->withTrashed();
        }

        // Search
        if ($this->search) {
            $query->where(function ($q) {
                $q->where('name', 'like', '%' . $this->search . '%')
                  ->orWhere('comment', 'like', '%' . $this->search . '%')
                  ->orWhereHas('airline', function ($aq) {
                      $aq->where('name', 'like', '%' . $this->search . '%');
                  });
            });
        }

        // Filters
        if ($this->filterAirline) {
            $query->where('airline_id', $this->filterAirline);
        }
        
        if ($this->filterAircraftType) {
            $query->where('aircraft_type_id', $this->filterAircraftType);
        }
        
        if ($this->filterDesignStatus) {
            $query->where('design_status_id', $this->filterDesignStatus);
        }
        
        if ($this->filterCommercialStatus) {
            $query->where('commercial_status_id', $this->filterCommercialStatus);
        }

        // Sorting
        $query->orderBy($this->sortBy, $this->sortDirection);

        return $query->paginate($this->perPage);
    }

    public function sortBy($field)
    {
        if ($this->sortBy === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortBy = $field;
            $this->sortDirection = 'asc';
        }
        $this->resetPage();
    }

    public function clearFilters()
    {
        $this->search = '';
        $this->filterAirline = '';
        $this->filterAircraftType = '';
        $this->filterDesignStatus = '';
        $this->filterCommercialStatus = '';
        $this->showDeleted = false;
        $this->resetPage();
    }

    public function openCreateModal()
    {
        $this->resetForm();
        $this->modalMode = 'create';
        $this->showModal = true;
    }

    public function openEditModal($projectId)
    {
        $this->selectedProject = Project::withTrashed()->findOrFail($projectId);
        $this->fillForm($this->selectedProject);
        $this->modalMode = 'edit';
        $this->showModal = true;
    }

    public function closeModal()
    {
        $this->showModal = false;
        $this->resetForm();
        $this->selectedProject = null;
    }

    public function save()
    {
        try {
            $this->validate();

            if ($this->modalMode === 'create') {
                $project = Project::create($this->getFormData());
                
                // Save attachments
                $this->saveAttachments($project);
                
                session()->flash('message', 'Project created successfully.');
            } else {
                // Store old project data for comparison (load relationships first)
                $oldProject = $this->selectedProject->load(['airline', 'aircraftType'])->replicate();
                
                $this->selectedProject->update($this->getFormData());
                
                // Save new attachments
                $this->saveAttachments($this->selectedProject);
                
                // Reload the updated project with relationships
                $updatedProject = $this->selectedProject->fresh(['airline', 'aircraftType']);
                
                // Update related opportunity names if project name or key attributes changed
                $updatedOpportunityCount = $this->updateRelatedOpportunityNames($oldProject, $updatedProject);
                
                $message = 'Project updated successfully.';
                if ($updatedOpportunityCount > 0) {
                    $message .= " Also updated {$updatedOpportunityCount} related opportunity name(s) to match the new project details.";
                }
                session()->flash('message', $message);
            }

            $this->closeModal();
        } catch (\Exception $e) {
            session()->flash('error', 'Error saving project: ' . $e->getMessage());
        }
    }

    public function delete($projectId)
    {
        $project = Project::withTrashed()->findOrFail($projectId);
        if ($project->trashed()) {
            $project->restore();
            session()->flash('message', 'Project restored successfully.');
        } else {
            $project->delete();
            session()->flash('message', 'Project deleted successfully.');
        }
    }

    private function resetForm()
    {
        $this->name = '';
        $this->airline_id = '';
        $this->aircraft_type_id = '';
        $this->number_of_aircraft = '';
        $this->design_status_id = '';
        $this->commercial_status_id = '';
        $this->owner_id = auth()->user()->id ?? '';
        $this->comment = '';
        $this->nameManuallyEdited = false;
        $this->autoGeneratedName = '';
        $this->attachments = [];
        $this->existingAttachments = [];
        $this->attachmentToDelete = null;
        
        // Reset forecasting fields
        $this->linefit_retrofit = '';
        $this->project_lifecycle_duration = 3;
        $this->expected_start_year = '';
        $this->aircraft_distribution = [];
        $this->distribution_years = [];
        $this->show_distribution = false;
    }

    private function fillForm($project)
    {
        $this->name = $project->name;
        $this->airline_id = $project->airline_id;
        $this->aircraft_type_id = $project->aircraft_type_id;
        $this->number_of_aircraft = $project->number_of_aircraft;
        $this->design_status_id = $project->design_status_id;
        $this->commercial_status_id = $project->commercial_status_id;
        $this->owner_id = $project->owner_id;
        $this->comment = $project->comment;
        
        // Fill forecasting fields
        $this->linefit_retrofit = $project->linefit_retrofit ?? '';
        $this->project_lifecycle_duration = $project->project_lifecycle_duration ?? 3;
        $this->expected_start_year = $project->expected_start_year ?? '';
        
        // Set up aircraft distribution if project has forecasting data
        if ($project->expected_start_year && $project->expected_close_year && $project->distribution_pattern) {
            $this->setupDistributionFields();
        }
        
        // Set the auto-generated name for comparison
        $this->nameManuallyEdited = false;
        $this->autoGeneratedName = $this->name;
        
        // Load existing attachments
        $this->existingAttachments = $project->attachments;
        $this->attachments = [];
    }

    private function getFormData()
    {
        $data = [
            'name' => $this->name,
            'airline_id' => $this->airline_id,
            'aircraft_type_id' => $this->aircraft_type_id ?: null,
            'number_of_aircraft' => $this->number_of_aircraft ?: null,
            'design_status_id' => $this->design_status_id ?: null,
            'commercial_status_id' => $this->commercial_status_id ?: null,
            'owner_id' => $this->owner_id,
            'comment' => $this->comment,
        ];
        
        // Add forecasting fields if provided
        if ($this->linefit_retrofit) {
            $data['linefit_retrofit'] = $this->linefit_retrofit;
        }
        
        if ($this->project_lifecycle_duration) {
            $data['project_lifecycle_duration'] = $this->project_lifecycle_duration;
        }
        
        if ($this->expected_start_year) {
            $data['expected_start_year'] = $this->expected_start_year;
            $data['expected_close_year'] = $this->expected_start_year + ($this->project_lifecycle_duration - 1);
            
            // Generate distribution pattern based on aircraft distribution
            if (!empty($this->aircraft_distribution)) {
                $total = array_sum($this->aircraft_distribution);
                $pattern = [];
                foreach ($this->aircraft_distribution as $aircraft) {
                    $pattern[] = $total > 0 ? round($aircraft / $total, 3) : 0;
                }
                $data['distribution_pattern'] = $pattern;
            } else {
                // Use default distribution pattern
                $data['distribution_pattern'] = $this->getDefaultDistributionPattern($this->project_lifecycle_duration);
            }
        }
        
        return $data;
    }

    public function updatedSearch()
    {
        $this->resetPage();
    }

    public function updatedFilterAirline()
    {
        $this->resetPage();
    }

    public function updatedFilterAircraftType()
    {
        $this->resetPage();
    }

    public function updatedFilterDesignStatus()
    {
        $this->resetPage();
    }

    public function updatedFilterCommercialStatus()
    {
        $this->resetPage();
    }

    public function updatedShowDeleted()
    {
        $this->resetPage();
    }

    public function updatedPerPage()
    {
        $this->resetPage();
    }
    
    public function updatedAirlineId()
    {
        $this->generateProjectName();
    }
    
    public function updatedAircraftTypeId()
    {
        $this->generateProjectName();
    }
    
    public function updatedName()
    {
        // Check if user has manually edited the name
        if ($this->name !== $this->autoGeneratedName) {
            $this->nameManuallyEdited = true;
        }
    }
    
    private function generateProjectName()
    {
        // Only auto-generate if name hasn't been manually edited or if in edit mode
        if ($this->nameManuallyEdited && $this->modalMode === 'create') {
            return;
        }
        
        $nameParts = [];
        
        // Add airline name
        if ($this->airline_id) {
            $airline = Airline::find($this->airline_id);
            if ($airline) {
                $nameParts[] = $airline->name;
            }
        }
        
        // Add aircraft type
        if ($this->aircraft_type_id) {
            $aircraftType = AircraftType::find($this->aircraft_type_id);
            if ($aircraftType) {
                $nameParts[] = $aircraftType->name;
            }
        }
        
        // Generate the base name
        $baseName = implode(' ', $nameParts);
        
        if ($baseName) {
            // In edit mode, preserve any custom suffix the user had added
            if ($this->modalMode === 'edit' && $this->name) {
                // Check if the current name starts with the old auto-generated pattern
                $currentBaseParts = [];
                
                if ($this->selectedProject) {
                    if ($this->selectedProject->airline) {
                        $currentBaseParts[] = $this->selectedProject->airline->name;
                    }
                    if ($this->selectedProject->aircraftType) {
                        $currentBaseParts[] = $this->selectedProject->aircraftType->name;
                    }
                }
                
                $oldBase = implode(' ', $currentBaseParts);
                
                // If the name starts with the old base, preserve the suffix
                if ($oldBase && str_starts_with($this->name, $oldBase)) {
                    $suffix = trim(substr($this->name, strlen($oldBase)));
                    $this->name = $baseName . ($suffix ? ' ' . $suffix : '');
                } else {
                    // Name was completely custom, update to new base
                    $this->name = $baseName;
                }
            } else {
                // For new projects, just use the base name
                $this->name = $baseName;
            }
            
            $this->autoGeneratedName = $this->name;
        }
    }
    
    private function updateRelatedOpportunityNames($oldProject, $newProject)
    {
        // Check if any key attributes that affect opportunity names have changed
        $keyAttributesChanged = (
            $oldProject->name !== $newProject->name ||
            $oldProject->airline_id !== $newProject->airline_id ||
            $oldProject->aircraft_type_id !== $newProject->aircraft_type_id
        );
        
        if (!$keyAttributesChanged) {
            return 0; // No need to update if nothing relevant changed
        }
        
        // Get all opportunities for this project that have auto-generated names
        $opportunities = $newProject->opportunities()->get();
        $updatedCount = 0;
        
        foreach ($opportunities as $opportunity) {
            // Generate the new opportunity name based on updated project data
            $newOpportunityName = $this->generateOpportunityName($newProject, $opportunity);
            
            if ($newOpportunityName && $newOpportunityName !== $opportunity->name) {
                // Check if the opportunity name appears to be auto-generated (contains project elements)
                if ($this->isOpportunityNameAutoGenerated($opportunity, $oldProject)) {
                    $opportunity->update([
                        'name' => $newOpportunityName,
                        'updated_by' => auth()->id()
                    ]);
                    $updatedCount++;
                }
            }
        }
        
        return $updatedCount;
    }
    
    private function generateOpportunityName($project, $opportunity)
    {
        $nameParts = [];
        
        // Add airline name
        if ($project->airline) {
            $nameParts[] = $project->airline->name;
        }
        
        // Add aircraft type
        if ($project->aircraftType) {
            $nameParts[] = $project->aircraftType->name;
        }
        
        // Add opportunity type
        if ($opportunity->type) {
            $nameParts[] = ucfirst($opportunity->type?->value ?? $opportunity->type);
        }
        
        // Add cabin class
        if ($opportunity->cabin_class) {
            $cabinClass = str_replace('_', ' ', ucwords($opportunity->cabin_class?->value ?? $opportunity->cabin_class, '_'));
            $nameParts[] = $cabinClass;
        }
        
        return implode(' ', $nameParts);
    }
    
    private function isOpportunityNameAutoGenerated($opportunity, $oldProject)
    {
        // Check if the opportunity name contains elements that suggest it was auto-generated
        $currentName = strtolower($opportunity->name ?? '');
        
        // Check if it contains old project elements
        if ($oldProject->airline && str_contains($currentName, strtolower($oldProject->airline->name))) {
            return true;
        }
        
        if ($oldProject->aircraftType && str_contains($currentName, strtolower($oldProject->aircraftType->name))) {
            return true;
        }
        
        if ($opportunity->type && str_contains($currentName, strtolower($opportunity->type?->value ?? $opportunity->type))) {
            return true;
        }
        
        if ($opportunity->cabin_class) {
            $cabinClass = str_replace('_', ' ', strtolower($opportunity->cabin_class?->value ?? $opportunity->cabin_class));
            if (str_contains($currentName, $cabinClass)) {
                return true;
            }
        }
        
        return false;
    }
    
    public function removeAttachment($index)
    {
        unset($this->attachments[$index]);
        $this->attachments = array_values($this->attachments);
    }
    
    public function deleteExistingAttachment($attachmentId)
    {
        $this->attachmentToDelete = $attachmentId;
    }
    
    public function confirmDeleteAttachment()
    {
        if ($this->attachmentToDelete) {
            $attachment = Attachment::find($this->attachmentToDelete);
            if ($attachment) {
                Storage::delete($attachment->file_path);
                $attachment->delete();
                
                // Refresh existing attachments
                if ($this->selectedProject) {
                    $this->existingAttachments = $this->selectedProject->fresh()->attachments;
                }
            }
            $this->attachmentToDelete = null;
        }
    }
    
    public function cancelDeleteAttachment()
    {
        $this->attachmentToDelete = null;
    }
    
    public function updateOpportunityNames($projectId)
    {
        try {
            $project = Project::with(['airline', 'aircraftType', 'opportunities'])->findOrFail($projectId);
            
            if (!$project->opportunities || $project->opportunities->count() === 0) {
                session()->flash('message', 'No opportunities found for this project.');
                return;
            }
            
            $updatedCount = 0;
            
            foreach ($project->opportunities as $opportunity) {
                $newOpportunityName = $this->generateOpportunityName($project, $opportunity);
                
                if ($newOpportunityName && $newOpportunityName !== $opportunity->name) {
                    $opportunity->update([
                        'name' => $newOpportunityName,
                        'updated_by' => auth()->id()
                    ]);
                    $updatedCount++;
                }
            }
            
            if ($updatedCount > 0) {
                session()->flash('message', "Updated {$updatedCount} opportunity name(s) to match current project details.");
            } else {
                session()->flash('message', 'All opportunity names are already up to date.');
            }
        } catch (\Exception $e) {
            session()->flash('error', 'Error updating opportunity names: ' . $e->getMessage());
        }
    }
    
    private function saveAttachments($project)
    {
        foreach ($this->attachments as $file) {
            if ($file) {
                $path = $file->store('projects', 'public');
                
                Attachment::create([
                    'attachable_type' => Project::class,
                    'attachable_id' => $project->id,
                    'name' => $file->getClientOriginalName(),
                    'file_path' => $path,
                    'mime_type' => $file->getMimeType(),
                    'file_size' => $file->getSize(),
                    'uploaded_by' => auth()->id(),
                ]);
            }
        }
    }
    
    // Forecasting methods
    public function updatedExpectedStartYear()
    {
        $this->setupDistributionFields();
    }
    
    public function updatedProjectLifecycleDuration()
    {
        $this->setupDistributionFields();
    }
    
    public function updatedNumberOfAircraft()
    {
        // Recalculate distribution if forecasting is already set up
        if ($this->show_distribution) {
            $this->setupDistributionFields();
        }
    }
    
    public function setupDistributionFields()
    {
        if ($this->expected_start_year && $this->project_lifecycle_duration) {
            $this->distribution_years = [];
            $this->aircraft_distribution = [];
            
            for ($i = 0; $i < $this->project_lifecycle_duration; $i++) {
                $year = $this->expected_start_year + $i;
                $this->distribution_years[] = $year;
                
                // Initialize with default distribution or keep existing values
                if (!isset($this->aircraft_distribution[$i])) {
                    $defaultPattern = $this->getDefaultDistributionPattern($this->project_lifecycle_duration);
                    $totalAircraft = $this->number_of_aircraft ?: 100; // Use 100 as default if not set
                    $this->aircraft_distribution[$i] = round($totalAircraft * $defaultPattern[$i]);
                } elseif ($this->number_of_aircraft && count($this->aircraft_distribution) == $this->project_lifecycle_duration) {
                    // If number of aircraft changed and we have existing distribution, recalculate proportionally
                    $currentTotal = array_sum($this->aircraft_distribution);
                    if ($currentTotal > 0) {
                        $proportion = $this->aircraft_distribution[$i] / $currentTotal;
                        $this->aircraft_distribution[$i] = round($this->number_of_aircraft * $proportion);
                    }
                }
            }
            
            $this->show_distribution = true;
        } else {
            $this->show_distribution = false;
        }
    }
    
    private function getDefaultDistributionPattern($duration)
    {
        switch ($duration) {
            case 1:
                return [1.0];
            case 2:
                return [0.3, 0.7];
            case 3:
                return [0.2, 0.6, 0.2];
            case 4:
                return [0.15, 0.25, 0.35, 0.25];
            case 5:
                return [0.1, 0.2, 0.4, 0.2, 0.1];
            case 6:
                return [0.08, 0.15, 0.25, 0.27, 0.15, 0.1];
            case 7:
                return [0.07, 0.12, 0.18, 0.26, 0.18, 0.12, 0.07];
            case 8:
                return [0.06, 0.1, 0.15, 0.19, 0.25, 0.15, 0.1, 0.06];
            case 9:
                return [0.05, 0.08, 0.12, 0.17, 0.21, 0.21, 0.12, 0.08, 0.05];
            case 10:
                return [0.04, 0.07, 0.1, 0.14, 0.18, 0.18, 0.14, 0.1, 0.07, 0.04];
            default:
                return [0.2, 0.6, 0.2]; // fallback to 3-year
        }
    }
}